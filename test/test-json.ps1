
$exam = $null

$exam = [PSCustomObject]@{
  id = [int]$null # exam description
  title = [string]$null # exam description
  description = [string]$null # exam description
  author = [PSCustomObject]@{
    id = [int]$null # author ID
    name = [string]$null # author name
    image = [string]$null # author image
  }
  code = [string]$null # exam number
  time = [int]$null # maximum exam time
  pass = [int]$null # minimum score required to pass exam
  image = [string]$null # cover image of exam
  cover = [array[]] @() # fill array with addText method
}

function addMethods ([string]$location){
    # Add addText method to Exam object
  $exam | Add-Member -Name addText -MemberType ScriptMethod -Value {
    param( 
      [Parameter(Mandatory=$true,
      HelpMessage="0=Image URL, 1=Normal Size, 2=Large Size")]
      [int]$textSize, 
      [Parameter(Mandatory=$true,
      HelpMessage="Enter Text")]
      [string]$text,
      [Parameter(Mandatory=$false,
      HelpMessage="Location to add text, default=cover")]
      [string]$location
    )
      
    $this.$location += [PSCustomObject]@{ # Add object with values from input
      variant = [int]$textSize
      text = [string]$text
    }

  } -Force
}
addMethods("cover")

$exam.GetType()
$exam.addText(1, "test", "test.question")
$exam.test.gettype()




[string]$string = "test.question"


$exam.

$exam.$string +=[PSCustomObject]@{ # Add object with values from input
  variant = [int]$textSize ="1"
  text = [string]$text = "asd"
}



Get-Content "test/jsonConfigFile.json" -Raw | Test-Json

$json = [ordered]@{}

(Get-Content "test/jsonConfigFile.json" -Raw | ConvertFrom-Json).PSObject.Properties |
    ForEach-Object { $json[$_.Name] = $_.Value }


function NewJsonExam () {
  New-Object [PSCustomObject] -Property @{
    id = [int] # exam description
    ;title = [string] # exam description
    ;description = [string] # exam description
    ;author = [ordered] @{
      id = [int] # author ID
      ;name = [string] # author name
      ;image = [string] # author image
    }
    ;code = [string] # exam code
    ;time = [int] # exam time
    ;pass = [int] # minimum exam score needed
    ;image = [string] # exam cover image
    ;cover = [array[]] @() # takes objects generated by variant function
    ;test = [array[]] @() # takes objects generated by question function
  }
} # End of function newJsonExam

function NewJsonQuestion () {
  New-Object [PSCustomObject] -Property @{
    variant = [int] # question variant
    ;question = [array[]] @() # body of actual question
    ;choices = [array[]] @() # body of actual choices
    ;answer = [array[]] @() # array with true/false for every choice
    ;explanation = [array[]] @() # explanation
  }
} # End of function newJsonQuestion