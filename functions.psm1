### Functions ###
function NewQuestion (){ # Create new question object
  $propertylist = [ordered] @{
    index = [string]
    ;section = @()
    ;type = @()
    ;text = @()
    ;image = @()
    ;answers = @()
    ;correct = @()
    ;explanation = @()
  }
  $question = New-Object psobject -Property $propertylist
  $question
} # End of function NewQuestion

function Like ( $str, $patterns ) { # Perform like search in Array
  $patterns | ForEach-Object {
    if ($str -ilike $_ ) {
      return $true
    }
  }  
} # End of function Like

function ConvertAnswer($_) {
  $input = $_.tostring()
  switch ( $input ) {
    "A" {"0"; Break}
    "B" {"1"; break}
    "C" {"2"; break}
    "D" {"3"; break}
    "E" {"4"; break}
    "F" {"5"; break}
    "G" {"6"; break}
    "H" {"7"; break}
    "I" {"8"; break}
    "J" {"9"; break}
    "K" {"10"; break}
    "L" {"11"; break}
  }
} # End of function ConvertAnswer

function NewJsonExam () {
  New-Object psobject -Property @{
    id = [int] # exam ID
    ;title = [string] # exam title
    ;description = [string] # exam description
    ;author = @{
      id = [int] # author ID
      ;name = [string] # author name
      ;image = [string] # author image
    }
    ;code = [string] # exam code
    ;time = [int] # exam time
    ;pass = [int] # minimum exam score needed
    ;image = [string] # exam cover image
    ;cover = @() # takes objects generated by variant function
    ;test = @() # takes objects generated by question function
  }
} # End of function newJsonExam

function NewJsonQuestion () {
  New-Object psobject -Property @{
    variant = [int] # question variant
    ;question = @() # body of actual question
    ;choices = @() # body of actual choices
    ;answer = @() # array with true/false for every choice
    ;explanation = @() # explanation
  }
} # End of function newJsonQuestion


function ExtractWordImages($folderPath, $wordFileName) { # extracts images from .docx and stores them in .\images folder, 
  $wordFile = Get-ChildItem -Path ($folderPath + $wordFileName) -Filter *.docx
  Rename-Item $wordFile -NewName ($wordFile.BaseName + ".zip") 
  Expand-Archive ($wordFile.BaseName + ".zip") -Force

  #Get-ChildItem -Path ($wordFile.BaseName + "\word\media\") | ForEach-Object {
  #  Copy-Item -Path ($wordFile.BaseName + "\word\media\*") -Destination ($folderPath + "\images")
  #}
  $zipFile = Get-ChildItem -Path ($folderPath + $wordFile.BaseName + ".zip") -Filter *.zip 
  Rename-Item -Path $zipFile.FullName -NewName ($zipFile.BaseName + ".docx") 
  #Remove-Item -Path ($folderPath + "\" + $zipFile.BaseName) -Recurse
} # End of function extractWordImages

Export-ModuleMember -Function ConvertAnswer, ExtractWordImages, Like, NewJsonExam, NewJsonQuestion, NewQuestion
